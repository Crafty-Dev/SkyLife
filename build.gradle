plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"

}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		// location of the maven that hosts JEI files since January 2023
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}

	mavenCentral()
	mavenLocal()
	maven { url "https://jitpack.io"  }

}

loom {
	accessWidenerPath = file("src/main/resources/skylife.accesswidener")

}


dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// compile against the JEI API but do not include it at runtime
	// at runtime, use the full JEI jar for Fabric
	//modRuntimeOnly("mezz.jei:jei-1.21.1-fabric:${project.jei_version}")

	//LifeCompat
	//modImplementation "maven.modrinth:lifecompat:1.0.0"
	modImplementation "maven.modrinth:lifecompat:${project.lifecompat_version}+${project.minecraft_version}"
	modImplementation "maven.modrinth:eiv:${project.eiv_version}+${project.minecraft_version}"
	//modImplementation(files("libs/snowychristmas-1.0.0.jar"))

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

fabricApi {
	configureDataGeneration()
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
	projectId = "53piQdTg" // This can be the project ID or the slug. Either will work!
	versionNumber = String.valueOf(project.version) // You don't need to set this manually. Will fail if Modrinth has this version already
	versionType = "release" // This is the default -- can also be `beta` or `alpha`
	uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = ["1.21.4"] // Must be an array, even with only one version
	loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
	dependencies { // A special DSL for creating dependencies
		// scope.type
		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
		// The type can either be `project` or `version`
		required.project "fabric-api" // Creates a new required dependency on Fabric API
		required.project "lifecompat"
		optional.version "eiv", "${project.eiv_version}+${project.minecraft_version}" // Creates a new optional dependency on this specific version of Sodium
	}
}
